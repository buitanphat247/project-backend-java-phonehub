package com.example.phonehub.controller;

import com.example.phonehub.dto.ApiResponse;
import com.example.phonehub.dto.CreateCategoryRequest;
import com.example.phonehub.dto.CategoryDto;
import com.example.phonehub.service.CategoryService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@RestController
@RequestMapping("/api/v1/categories")
@Tag(name = "Category Management", description = "API qu·∫£n l√Ω danh m·ª•c s·∫£n ph·∫©m")
public class CategoryController {

    @Autowired
    private CategoryService categoryService;

    @Operation(summary = "üìÑ L·∫•y danh s√°ch danh m·ª•c c√≥ ph√¢n trang", description = "Tr·∫£ v·ªÅ danh s√°ch danh m·ª•c v·ªõi ph√¢n trang")
    @GetMapping
    public ResponseEntity<ApiResponse<Page<CategoryDto>>> getAllCategories(
            @Parameter(description = "S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 0)", example = "0") @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "S·ªë l∆∞·ª£ng danh m·ª•c m·ªói trang", example = "10") @RequestParam(defaultValue = "10") int size) {
        try {
            Page<CategoryDto> categories = categoryService.getAllCategories(page, size);
            ApiResponse<Page<CategoryDto>> response = ApiResponse.success("L·∫•y danh s√°ch danh m·ª•c th√†nh c√¥ng",
                    categories);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            ApiResponse<Page<CategoryDto>> response = ApiResponse
                    .error("L·ªói khi l·∫•y danh s√°ch danh m·ª•c: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    @Operation(summary = "üîç L·∫•y danh m·ª•c theo ID")
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<CategoryDto>> getCategoryById(
            @Parameter(description = "ID c·ªßa danh m·ª•c", required = true, example = "1") @PathVariable Integer id) {
        try {
            Optional<CategoryDto> category = categoryService.getCategoryById(id);
            if (category.isPresent()) {
                ApiResponse<CategoryDto> response = ApiResponse.success("L·∫•y danh m·ª•c th√†nh c√¥ng", category.get());
                return ResponseEntity.ok(response);
            } else {
                ApiResponse<CategoryDto> response = ApiResponse.notFound("Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID: " + id);
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
            }
        } catch (Exception e) {
            ApiResponse<CategoryDto> response = ApiResponse.error("L·ªói khi l·∫•y danh m·ª•c: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    @Operation(summary = "üîé T√¨m danh m·ª•c theo slug")
    @GetMapping("/search")
    public ResponseEntity<ApiResponse<CategoryDto>> getCategoryBySlug(
            @Parameter(description = "Slug c·ªßa danh m·ª•c", required = true, example = "dien-thoai-thong-minh") @RequestParam String slug) {
        try {
            Optional<CategoryDto> category = categoryService.getCategoryBySlug(slug);
            if (category.isPresent()) {
                ApiResponse<CategoryDto> response = ApiResponse.success("T√¨m th·∫•y danh m·ª•c", category.get());
                return ResponseEntity.ok(response);
            } else {
                ApiResponse<CategoryDto> response = ApiResponse.notFound("Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi slug: " + slug);
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
            }
        } catch (Exception e) {
            ApiResponse<CategoryDto> response = ApiResponse.error("L·ªói khi t√¨m danh m·ª•c: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    @Operation(summary = "‚ûï T·∫°o danh m·ª•c m·ªõi")
    @PostMapping
    public ResponseEntity<ApiResponse<CategoryDto>> createCategory(
            @Valid @RequestBody CreateCategoryRequest request) {
        try {
            CategoryDto category = categoryService.createCategory(request);
            ApiResponse<CategoryDto> response = ApiResponse.success("T·∫°o danh m·ª•c th√†nh c√¥ng", category);
            return ResponseEntity.status(HttpStatus.CREATED).body(response);
        } catch (RuntimeException e) {
            if (e.getMessage().contains("already exists")) {
                ApiResponse<CategoryDto> response = ApiResponse.conflict(e.getMessage());
                return ResponseEntity.status(HttpStatus.CONFLICT).body(response);
            }
            ApiResponse<CategoryDto> response = ApiResponse.error("L·ªói khi t·∫°o danh m·ª•c: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        } catch (Exception e) {
            ApiResponse<CategoryDto> response = ApiResponse.error("L·ªói khi t·∫°o danh m·ª•c: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    @Operation(summary = "‚úèÔ∏è C·∫≠p nh·∫≠t danh m·ª•c")
    @PutMapping("/{id}")
    public ResponseEntity<ApiResponse<CategoryDto>> updateCategory(
            @Parameter(description = "ID c·ªßa danh m·ª•c", required = true, example = "1") @PathVariable Integer id,
            @Valid @RequestBody CreateCategoryRequest request) {
        try {
            CategoryDto category = categoryService.updateCategory(id, request);
            ApiResponse<CategoryDto> response = ApiResponse.success("C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng", category);
            return ResponseEntity.ok(response);
        } catch (RuntimeException e) {
            if (e.getMessage().contains("not found")) {
                ApiResponse<CategoryDto> response = ApiResponse.notFound(e.getMessage());
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
            }
            if (e.getMessage().contains("already exists")) {
                ApiResponse<CategoryDto> response = ApiResponse.conflict(e.getMessage());
                return ResponseEntity.status(HttpStatus.CONFLICT).body(response);
            }
            ApiResponse<CategoryDto> response = ApiResponse.error("L·ªói khi c·∫≠p nh·∫≠t danh m·ª•c: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        } catch (Exception e) {
            ApiResponse<CategoryDto> response = ApiResponse.error("L·ªói khi c·∫≠p nh·∫≠t danh m·ª•c: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    @Operation(summary = "üóëÔ∏è X√≥a danh m·ª•c")
    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<Void>> deleteCategory(
            @Parameter(description = "ID c·ªßa danh m·ª•c", required = true, example = "1") @PathVariable Integer id) {
        try {
            categoryService.deleteCategory(id);
            ApiResponse<Void> response = ApiResponse.success("X√≥a danh m·ª•c th√†nh c√¥ng", null);
            return ResponseEntity.ok(response);
        } catch (RuntimeException e) {
            if (e.getMessage().contains("not found")) {
                ApiResponse<Void> response = ApiResponse.notFound(e.getMessage());
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
            }
            ApiResponse<Void> response = ApiResponse.error("L·ªói khi x√≥a danh m·ª•c: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        } catch (Exception e) {
            ApiResponse<Void> response = ApiResponse.error("L·ªói khi x√≥a danh m·ª•c: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }
}
