package com.example.phonehub.controller;

import com.example.phonehub.dto.*;
import com.example.phonehub.service.ProductService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@RestController
@RequestMapping("/api/v1/products")
@Tag(name = "Product Management", description = "API qu·∫£n l√Ω s·∫£n ph·∫©m")
public class ProductController {
    @Autowired private ProductService productService;

    @Operation(summary = "üìÑ L·∫•y danh s√°ch s·∫£n ph·∫©m c√≥ ph√¢n trang", description = "Tr·∫£ v·ªÅ danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m v·ªõi ph√¢n trang")
    @GetMapping
    public ResponseEntity<ApiResponse<Page<ProductDto>>> getAll(@RequestParam(defaultValue = "0") int page, @RequestParam(defaultValue = "10") int size){
        try { return ResponseEntity.ok(ApiResponse.success("L·∫•y danh s√°ch s·∫£n ph·∫©m th√†nh c√¥ng", productService.getAll(page,size))); }
        catch (Exception e){ return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error("L·ªói: "+e.getMessage())); }
    }

    @Operation(summary = "üìÑ L·∫•y danh s√°ch s·∫£n ph·∫©m ƒë√£ xu·∫•t b·∫£n", description = "Tr·∫£ v·ªÅ danh s√°ch s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c xu·∫•t b·∫£n v·ªõi ph√¢n trang")
    @GetMapping("/published")
    public ResponseEntity<ApiResponse<Page<ProductDto>>> getPublished(@RequestParam(defaultValue = "0") int page, @RequestParam(defaultValue = "10") int size){
        try { return ResponseEntity.ok(ApiResponse.success(productService.getPublished(page,size))); }
        catch (Exception e){ return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error("L·ªói: "+e.getMessage())); }
    }

    @Operation(summary = "üìÑ L·∫•y danh s√°ch s·∫£n ph·∫©m theo danh m·ª•c", description = "Tr·∫£ v·ªÅ danh s√°ch s·∫£n ph·∫©m ƒë√£ xu·∫•t b·∫£n theo danh m·ª•c v·ªõi ph√¢n trang")
    @GetMapping("/published/category/{categoryId}")
    public ResponseEntity<ApiResponse<Page<ProductDto>>> getByCategory(
            @Parameter(description = "ID c·ªßa danh m·ª•c", required = true, example = "1") @PathVariable Integer categoryId, 
            @RequestParam(defaultValue = "0") int page, 
            @RequestParam(defaultValue = "10") int size){
        try { return ResponseEntity.ok(ApiResponse.success(productService.getPublishedByCategory(categoryId,page,size))); }
        catch (Exception e){ return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error("L·ªói: "+e.getMessage())); }
    }

    @Operation(summary = "üìÑ L·∫•y danh s√°ch s·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu", description = "Tr·∫£ v·ªÅ danh s√°ch s·∫£n ph·∫©m ƒë√£ xu·∫•t b·∫£n theo th∆∞∆°ng hi·ªáu v·ªõi ph√¢n trang")
    @GetMapping("/published/brand")
    public ResponseEntity<ApiResponse<Page<ProductDto>>> getByBrand(
            @Parameter(description = "T√™n th∆∞∆°ng hi·ªáu", required = true, example = "OPPO") @RequestParam String brand, 
            @RequestParam(defaultValue = "0") int page, 
            @RequestParam(defaultValue = "10") int size){
        try { return ResponseEntity.ok(ApiResponse.success(productService.getPublishedByBrand(brand,page,size))); }
        catch (Exception e){ return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error("L·ªói: "+e.getMessage())); }
    }

    @Operation(summary = "üîç L·∫•y s·∫£n ph·∫©m theo ID", description = "Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m theo ID")
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<ProductDto>> getById(
            @Parameter(description = "ID c·ªßa s·∫£n ph·∫©m", required = true, example = "1") @PathVariable Integer id){
        try {
            Optional<ProductDto> p = productService.getById(id);
            return p.map(productDto -> ResponseEntity.ok(ApiResponse.success("L·∫•y s·∫£n ph·∫©m th√†nh c√¥ng", productDto)))
                    .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).body(ApiResponse.notFound("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m")));
        } catch (Exception e){ return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error("L·ªói: "+e.getMessage())); }
    }

    @Operation(summary = "üîé T√¨m s·∫£n ph·∫©m theo slug", description = "T√¨m ki·∫øm s·∫£n ph·∫©m theo slug")
    @GetMapping("/search")
    public ResponseEntity<ApiResponse<ProductDto>> getBySlug(
            @Parameter(description = "Slug c·ªßa s·∫£n ph·∫©m", required = true, example = "may-tinh-bang-oppo-pad-se") @RequestParam String slug){
        try {
            Optional<ProductDto> p = productService.getBySlug(slug);
            return p.map(productDto -> ResponseEntity.ok(ApiResponse.success("T√¨m th·∫•y s·∫£n ph·∫©m", productDto)))
                    .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).body(ApiResponse.notFound("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m")));
        } catch (Exception e){ return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error("L·ªói: "+e.getMessage())); }
    }

    @Operation(summary = "‚ûï T·∫°o s·∫£n ph·∫©m m·ªõi", description = "T·∫°o m·ªôt s·∫£n ph·∫©m m·ªõi trong h·ªá th·ªëng")
    @PostMapping
    public ResponseEntity<ApiResponse<ProductDto>> create(@Valid @RequestBody CreateProductRequest req){
        try { return ResponseEntity.status(HttpStatus.CREATED).body(ApiResponse.success("T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng", productService.create(req))); }
        catch (RuntimeException e){
            if (e.getMessage().contains("already exists")) return ResponseEntity.status(HttpStatus.CONFLICT).body(ApiResponse.conflict(e.getMessage()));
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ApiResponse.badRequest(e.getMessage()));
        } catch (Exception e){ return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error("L·ªói: "+e.getMessage())); }
    }

    @Operation(summary = "‚úèÔ∏è C·∫≠p nh·∫≠t s·∫£n ph·∫©m", description = "C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m theo ID")
    @PutMapping("/{id}")
    public ResponseEntity<ApiResponse<ProductDto>> update(
            @Parameter(description = "ID c·ªßa s·∫£n ph·∫©m", required = true, example = "1") @PathVariable Integer id, 
            @Valid @RequestBody CreateProductRequest req){
        try { return ResponseEntity.ok(ApiResponse.success("C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng", productService.update(id, req))); }
        catch (RuntimeException e){
            String msg=e.getMessage();
            if (msg.contains("not found")) return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ApiResponse.notFound(msg));
            if (msg.contains("already exists")) return ResponseEntity.status(HttpStatus.CONFLICT).body(ApiResponse.conflict(msg));
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ApiResponse.badRequest(msg));
        } catch (Exception e){ return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error("L·ªói: "+e.getMessage())); }
    }

    @Operation(summary = "üóëÔ∏è X√≥a s·∫£n ph·∫©m", description = "X√≥a s·∫£n ph·∫©m theo ID")
    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<Void>> delete(
            @Parameter(description = "ID c·ªßa s·∫£n ph·∫©m", required = true, example = "1") @PathVariable Integer id){
        try { productService.delete(id); return ResponseEntity.ok(ApiResponse.success("X√≥a s·∫£n ph·∫©m th√†nh c√¥ng", null)); }
        catch (RuntimeException e){
            if (e.getMessage().contains("not found")) return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ApiResponse.notFound(e.getMessage()));
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ApiResponse.badRequest(e.getMessage()));
        } catch (Exception e){ return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error("L·ªói: "+e.getMessage())); }
    }
}



