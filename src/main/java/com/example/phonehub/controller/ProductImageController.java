package com.example.phonehub.controller;

import com.example.phonehub.dto.*;
import com.example.phonehub.service.ProductImageService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/v1/product-images")
@Tag(name = "Product Image Management", description = "API qu·∫£n l√Ω h√¨nh ·∫£nh s·∫£n ph·∫©m")
public class ProductImageController {
    @Autowired private ProductImageService imageService;

    @Operation(summary = "üñºÔ∏è L·∫•y danh s√°ch h√¨nh ·∫£nh theo Product ID", description = "Tr·∫£ v·ªÅ danh s√°ch t·∫•t c·∫£ h√¨nh ·∫£nh c·ªßa s·∫£n ph·∫©m")
    @GetMapping
    public ResponseEntity<ApiResponse<List<ProductImageDto>>> byProduct(
            @Parameter(description = "ID c·ªßa s·∫£n ph·∫©m", required = true, example = "1") @RequestParam Integer productId){
        try { return ResponseEntity.ok(ApiResponse.success(imageService.getByProduct(productId))); }
        catch (Exception e){ return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(ApiResponse.error("L·ªói: "+e.getMessage())); }
    }

    @Operation(summary = "‚ûï T·∫°o h√¨nh ·∫£nh m·ªõi", description = "T·∫°o m·ªôt h√¨nh ·∫£nh m·ªõi cho s·∫£n ph·∫©m")
    @PostMapping
    public ResponseEntity<ApiResponse<ProductImageDto>> create(@Valid @RequestBody CreateProductImageRequest req){
        try { return ResponseEntity.status(HttpStatus.CREATED).body(ApiResponse.success("T·∫°o ·∫£nh th√†nh c√¥ng", imageService.create(req))); }
        catch (RuntimeException e){ return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ApiResponse.badRequest(e.getMessage())); }
    }

    @Operation(summary = "‚úèÔ∏è C·∫≠p nh·∫≠t h√¨nh ·∫£nh", description = "C·∫≠p nh·∫≠t th√¥ng tin h√¨nh ·∫£nh theo ID")
    @PutMapping("/{id}")
    public ResponseEntity<ApiResponse<ProductImageDto>> update(
            @Parameter(description = "ID c·ªßa h√¨nh ·∫£nh", required = true, example = "1") @PathVariable Integer id, 
            @Valid @RequestBody CreateProductImageRequest req){
        try { return ResponseEntity.ok(ApiResponse.success("C·∫≠p nh·∫≠t ·∫£nh th√†nh c√¥ng", imageService.update(id, req))); }
        catch (RuntimeException e){ return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ApiResponse.badRequest(e.getMessage())); }
    }

    @Operation(summary = "üóëÔ∏è X√≥a h√¨nh ·∫£nh", description = "X√≥a h√¨nh ·∫£nh theo ID")
    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<Void>> delete(
            @Parameter(description = "ID c·ªßa h√¨nh ·∫£nh", required = true, example = "1") @PathVariable Integer id){
        try { imageService.delete(id); return ResponseEntity.ok(ApiResponse.success("X√≥a ·∫£nh th√†nh c√¥ng", null)); }
        catch (RuntimeException e){ return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ApiResponse.badRequest(e.getMessage())); }
    }
}



