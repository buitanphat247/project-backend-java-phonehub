package com.example.phonehub.controller;

import com.example.phonehub.dto.ApiResponse;
import com.example.phonehub.dto.CreateRoleRequest;
import com.example.phonehub.dto.RoleDto;
import com.example.phonehub.service.RoleService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@RestController
@RequestMapping("/api/v1/roles")
@Tag(name = "Role Management", description = "API qu·∫£n l√Ω vai tr√≤ ng∆∞·ªùi d√πng")
public class RoleController {

    @Autowired
    private RoleService roleService;

    @Operation(
        summary = "üìÑ L·∫•y danh s√°ch vai tr√≤ c√≥ ph√¢n trang", 
        description = "Tr·∫£ v·ªÅ danh s√°ch vai tr√≤ v·ªõi ph√¢n trang"
    )
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                responseCode = "200", 
                description = "‚úÖ L·∫•y danh s√°ch th√†nh c√¥ng"
            )
    })
    @GetMapping
    public ResponseEntity<ApiResponse<Page<RoleDto>>> getAllRolesPaged(
            @Parameter(description = "S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 0)", example = "0")
            @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "S·ªë l∆∞·ª£ng vai tr√≤ m·ªói trang", example = "10")
            @RequestParam(defaultValue = "10") int size) {
        try {
            Page<RoleDto> roles = roleService.getAllRoles(page, size);
            ApiResponse<Page<RoleDto>> response = ApiResponse.success("L·∫•y danh s√°ch vai tr√≤ th√†nh c√¥ng", roles);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            ApiResponse<Page<RoleDto>> response = ApiResponse.error("L·ªói khi l·∫•y danh s√°ch vai tr√≤: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    @Operation(
        summary = "üîç L·∫•y vai tr√≤ theo ID", 
        description = "Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt c·ªßa m·ªôt vai tr√≤"
    )
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                responseCode = "200", 
                description = "‚úÖ T√¨m th·∫•y vai tr√≤"
            ),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                responseCode = "404", 
                description = "‚ùå Kh√¥ng t√¨m th·∫•y vai tr√≤"
            )
    })
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<RoleDto>> getRoleById(
            @Parameter(description = "ID c·ªßa vai tr√≤", required = true, example = "1")
            @PathVariable Integer id) {
        try {
            Optional<RoleDto> role = roleService.getRoleById(id);
            if (role.isPresent()) {
                ApiResponse<RoleDto> response = ApiResponse.success("L·∫•y vai tr√≤ th√†nh c√¥ng", role.get());
                return ResponseEntity.ok(response);
            } else {
                ApiResponse<RoleDto> response = ApiResponse.notFound("Kh√¥ng t√¨m th·∫•y vai tr√≤ v·ªõi ID: " + id);
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
            }
        } catch (Exception e) {
            ApiResponse<RoleDto> response = ApiResponse.error("L·ªói khi l·∫•y vai tr√≤: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    @Operation(
        summary = "üîé T√¨m vai tr√≤ theo t√™n", 
        description = "T√¨m ki·∫øm vai tr√≤ theo t√™n"
    )
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                responseCode = "200", 
                description = "‚úÖ T√¨m th·∫•y vai tr√≤"
            ),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                responseCode = "404", 
                description = "‚ùå Kh√¥ng t√¨m th·∫•y vai tr√≤"
            )
    })
    @GetMapping("/search")
    public ResponseEntity<ApiResponse<RoleDto>> getRoleByName(
            @Parameter(description = "T√™n vai tr√≤", required = true, example = "ADMIN")
            @RequestParam String name) {
        try {
            Optional<RoleDto> role = roleService.getRoleByName(name);
            if (role.isPresent()) {
                ApiResponse<RoleDto> response = ApiResponse.success("T√¨m th·∫•y vai tr√≤", role.get());
                return ResponseEntity.ok(response);
            } else {
                ApiResponse<RoleDto> response = ApiResponse.notFound("Kh√¥ng t√¨m th·∫•y vai tr√≤ v·ªõi t√™n: " + name);
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
            }
        } catch (Exception e) {
            ApiResponse<RoleDto> response = ApiResponse.error("L·ªói khi t√¨m vai tr√≤: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    @Operation(
        summary = "‚ûï T·∫°o vai tr√≤ m·ªõi", 
        description = "T·∫°o m·ªôt vai tr√≤ m·ªõi trong h·ªá th·ªëng"
    )
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                responseCode = "201", 
                description = "‚úÖ T·∫°o vai tr√≤ th√†nh c√¥ng"
            ),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                responseCode = "400", 
                description = "‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá"
            ),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                responseCode = "409", 
                description = "‚ùå T√™n vai tr√≤ ƒë√£ t·ªìn t·∫°i"
            )
    })
    @PostMapping
    public ResponseEntity<ApiResponse<RoleDto>> createRole(
            @io.swagger.v3.oas.annotations.parameters.RequestBody(
                description = "Th√¥ng tin vai tr√≤ m·ªõi",
                required = true,
                content = @Content(
                    mediaType = "application/json",
                    schema = @Schema(implementation = CreateRoleRequest.class),
                    examples = @ExampleObject(value = """
                        {
                          "name": "MODERATOR"
                        }
                        """)
                )
            )
            @Valid @RequestBody CreateRoleRequest request) {
        try {
            RoleDto role = roleService.createRole(request);
            ApiResponse<RoleDto> response = ApiResponse.success("T·∫°o vai tr√≤ th√†nh c√¥ng", role);
            return ResponseEntity.status(HttpStatus.CREATED).body(response);
        } catch (RuntimeException e) {
            if (e.getMessage().contains("already exists")) {
                ApiResponse<RoleDto> response = ApiResponse.conflict(e.getMessage());
                return ResponseEntity.status(HttpStatus.CONFLICT).body(response);
            }
            ApiResponse<RoleDto> response = ApiResponse.error("L·ªói khi t·∫°o vai tr√≤: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        } catch (Exception e) {
            ApiResponse<RoleDto> response = ApiResponse.error("L·ªói khi t·∫°o vai tr√≤: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    @Operation(
        summary = "‚úèÔ∏è C·∫≠p nh·∫≠t vai tr√≤", 
        description = "C·∫≠p nh·∫≠t th√¥ng tin c·ªßa m·ªôt vai tr√≤"
    )
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                responseCode = "200", 
                description = "‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng"
            ),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                responseCode = "404", 
                description = "‚ùå Kh√¥ng t√¨m th·∫•y vai tr√≤"
            ),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                responseCode = "409", 
                description = "‚ùå T√™n vai tr√≤ ƒë√£ t·ªìn t·∫°i"
            )
    })
    @PutMapping("/{id}")
    public ResponseEntity<ApiResponse<RoleDto>> updateRole(
            @Parameter(description = "ID c·ªßa vai tr√≤", required = true, example = "1")
            @PathVariable Integer id,
            @io.swagger.v3.oas.annotations.parameters.RequestBody(
                description = "Th√¥ng tin c·∫≠p nh·∫≠t vai tr√≤",
                required = true,
                content = @Content(
                    mediaType = "application/json",
                    schema = @Schema(implementation = CreateRoleRequest.class),
                    examples = @ExampleObject(value = """
                        {
                          "name": "SUPER_ADMIN"
                        }
                        """)
                )
            )
            @Valid @RequestBody CreateRoleRequest request) {
        try {
            RoleDto role = roleService.updateRole(id, request);
            ApiResponse<RoleDto> response = ApiResponse.success("C·∫≠p nh·∫≠t vai tr√≤ th√†nh c√¥ng", role);
            return ResponseEntity.ok(response);
        } catch (RuntimeException e) {
            if (e.getMessage().contains("not found")) {
                ApiResponse<RoleDto> response = ApiResponse.notFound(e.getMessage());
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
            }
            if (e.getMessage().contains("already exists")) {
                ApiResponse<RoleDto> response = ApiResponse.conflict(e.getMessage());
                return ResponseEntity.status(HttpStatus.CONFLICT).body(response);
            }
            ApiResponse<RoleDto> response = ApiResponse.error("L·ªói khi c·∫≠p nh·∫≠t vai tr√≤: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        } catch (Exception e) {
            ApiResponse<RoleDto> response = ApiResponse.error("L·ªói khi c·∫≠p nh·∫≠t vai tr√≤: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    @Operation(
        summary = "üóëÔ∏è X√≥a vai tr√≤", 
        description = "X√≥a m·ªôt vai tr√≤ kh·ªèi h·ªá th·ªëng"
    )
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                responseCode = "200", 
                description = "‚úÖ X√≥a th√†nh c√¥ng"
            ),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(
                responseCode = "404", 
                description = "‚ùå Kh√¥ng t√¨m th·∫•y vai tr√≤"
            )
    })
    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<Void>> deleteRole(
            @Parameter(description = "ID c·ªßa vai tr√≤", required = true, example = "1")
            @PathVariable Integer id) {
        try {
            roleService.deleteRole(id);
            ApiResponse<Void> response = ApiResponse.success("X√≥a vai tr√≤ th√†nh c√¥ng", null);
            return ResponseEntity.ok(response);
        } catch (RuntimeException e) {
            if (e.getMessage().contains("not found")) {
                ApiResponse<Void> response = ApiResponse.notFound(e.getMessage());
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
            }
            ApiResponse<Void> response = ApiResponse.error("L·ªói khi x√≥a vai tr√≤: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        } catch (Exception e) {
            ApiResponse<Void> response = ApiResponse.error("L·ªói khi x√≥a vai tr√≤: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

}
