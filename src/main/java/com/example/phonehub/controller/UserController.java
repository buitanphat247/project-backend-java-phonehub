package com.example.phonehub.controller;

import com.example.phonehub.auth.annotation.RequiresAuth;
import com.example.phonehub.dto.ApiResponse;
import com.example.phonehub.dto.CreateUserRequest;
import com.example.phonehub.dto.UserDto;
import com.example.phonehub.service.UserService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;
import java.util.Optional;

@RestController
@RequestMapping("/api/v1/users")
@Tag(name = "User Management", description = "API qu·∫£n l√Ω ng∆∞·ªùi d√πng")
public class UserController {

    @Autowired
    private UserService userService;

    @RequiresAuth(roles = {"ADMIN"})
    @Operation(summary = "üìÑ L·∫•y danh s√°ch ng∆∞·ªùi d√πng c√≥ ph√¢n trang", description = "Tr·∫£ v·ªÅ danh s√°ch ng∆∞·ªùi d√πng v·ªõi ph√¢n trang")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "‚úÖ L·∫•y danh s√°ch th√†nh c√¥ng")
    })
    @GetMapping
    public ResponseEntity<ApiResponse<Page<UserDto>>> getAllUsers(
            @Parameter(description = "S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 0)", example = "0") @RequestParam(defaultValue = "0") int page,
            @Parameter(description = "S·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng m·ªói trang", example = "10") @RequestParam(defaultValue = "10") int size) {
        try {
            Page<UserDto> users = userService.getAllUsers(page, size);
            ApiResponse<Page<UserDto>> response = ApiResponse.success("L·∫•y danh s√°ch ng∆∞·ªùi d√πng th√†nh c√¥ng", users);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            ApiResponse<Page<UserDto>> response = ApiResponse
                    .error("L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    @Operation(summary = "üîç L·∫•y ng∆∞·ªùi d√πng theo ID", description = "Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt c·ªßa m·ªôt ng∆∞·ªùi d√πng")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "‚úÖ T√¨m th·∫•y ng∆∞·ªùi d√πng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng")
    })
    @GetMapping("/{id}")
    public ResponseEntity<ApiResponse<UserDto>> getUserById(
            @Parameter(description = "ID c·ªßa ng∆∞·ªùi d√πng", required = true, example = "1") @PathVariable Integer id) {
        try {
            Optional<UserDto> user = userService.getUserById(id);
            if (user.isPresent()) {
                ApiResponse<UserDto> response = ApiResponse.success("L·∫•y ng∆∞·ªùi d√πng th√†nh c√¥ng", user.get());
                return ResponseEntity.ok(response);
            } else {
                ApiResponse<UserDto> response = ApiResponse.notFound("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: " + id);
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
            }
        } catch (Exception e) {
            ApiResponse<UserDto> response = ApiResponse.error("L·ªói khi l·∫•y ng∆∞·ªùi d√πng: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    @Operation(summary = "üîé T√¨m ng∆∞·ªùi d√πng theo username", description = "T√¨m ki·∫øm ng∆∞·ªùi d√πng theo username")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "‚úÖ T√¨m th·∫•y ng∆∞·ªùi d√πng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng")
    })
    @GetMapping("/search/username")
    public ResponseEntity<ApiResponse<UserDto>> getUserByUsername(
            @Parameter(description = "Username", required = true, example = "john_doe") @RequestParam String username) {
        try {
            Optional<UserDto> user = userService.getUserByUsername(username);
            if (user.isPresent()) {
                ApiResponse<UserDto> response = ApiResponse.success("T√¨m th·∫•y ng∆∞·ªùi d√πng", user.get());
                return ResponseEntity.ok(response);
            } else {
                ApiResponse<UserDto> response = ApiResponse
                        .notFound("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi username: " + username);
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
            }
        } catch (Exception e) {
            ApiResponse<UserDto> response = ApiResponse.error("L·ªói khi t√¨m ng∆∞·ªùi d√πng: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    @Operation(summary = "üìß T√¨m ng∆∞·ªùi d√πng theo email", description = "T√¨m ki·∫øm ng∆∞·ªùi d√πng theo email")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "‚úÖ T√¨m th·∫•y ng∆∞·ªùi d√πng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng")
    })
    @GetMapping("/search/email")
    public ResponseEntity<ApiResponse<UserDto>> getUserByEmail(
            @Parameter(description = "Email", required = true, example = "john@example.com") @RequestParam String email) {
        try {
            Optional<UserDto> user = userService.getUserByEmail(email);
            if (user.isPresent()) {
                ApiResponse<UserDto> response = ApiResponse.success("T√¨m th·∫•y ng∆∞·ªùi d√πng", user.get());
                return ResponseEntity.ok(response);
            } else {
                ApiResponse<UserDto> response = ApiResponse.notFound("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email: " + email);
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
            }
        } catch (Exception e) {
            ApiResponse<UserDto> response = ApiResponse.error("L·ªói khi t√¨m ng∆∞·ªùi d√πng: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    @Operation(summary = "‚ûï T·∫°o ng∆∞·ªùi d√πng m·ªõi", description = "T·∫°o m·ªôt ng∆∞·ªùi d√πng m·ªõi v·ªõi role ID = 3 (c·∫•p th·∫•p nh·∫•t)")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "201", description = "‚úÖ T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "400", description = "‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "409", description = "‚ùå Username ho·∫∑c email ƒë√£ t·ªìn t·∫°i")
    })
    @PostMapping
    public ResponseEntity<ApiResponse<UserDto>> createUser(
            @io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Th√¥ng tin ng∆∞·ªùi d√πng m·ªõi", required = true, content = @Content(mediaType = "application/json", schema = @Schema(implementation = CreateUserRequest.class), examples = @ExampleObject(value = """
                    {
                      "username": "john_doe",
                      "password": "password123",
                      "email": "john@example.com",
                      "phone": "0123456789",
                      "address": "123 Main St",
                      "avatar": "https://example.com/avatar.jpg"
                    }
                    """))) @Valid @RequestBody CreateUserRequest request) {
        try {
            UserDto user = userService.createUser(request);
            ApiResponse<UserDto> response = ApiResponse.success("T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng", user);
            return ResponseEntity.status(HttpStatus.CREATED).body(response);
        } catch (RuntimeException e) {
            if (e.getMessage().contains("already exists")) {
                ApiResponse<UserDto> response = ApiResponse.conflict(e.getMessage());
                return ResponseEntity.status(HttpStatus.CONFLICT).body(response);
            }
            ApiResponse<UserDto> response = ApiResponse.error("L·ªói khi t·∫°o ng∆∞·ªùi d√πng: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        } catch (Exception e) {
            ApiResponse<UserDto> response = ApiResponse.error("L·ªói khi t·∫°o ng∆∞·ªùi d√πng: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    @Operation(summary = "‚úèÔ∏è C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng", description = "C·∫≠p nh·∫≠t th√¥ng tin c·ªßa m·ªôt ng∆∞·ªùi d√πng")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "409", description = "‚ùå Username ho·∫∑c email ƒë√£ t·ªìn t·∫°i")
    })
    @PutMapping("/{id}")
    public ResponseEntity<ApiResponse<UserDto>> updateUser(
            @Parameter(description = "ID c·ªßa ng∆∞·ªùi d√πng", required = true, example = "1") @PathVariable Integer id,
            @io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Th√¥ng tin c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng", required = true, content = @Content(mediaType = "application/json", schema = @Schema(implementation = CreateUserRequest.class), examples = @ExampleObject(value = """
                    {
                      "username": "john_doe_updated",
                      "password": "newpassword123",
                      "email": "john.updated@example.com",
                      "phone": "0987654321",
                      "address": "456 Updated St",
                      "avatar": "https://example.com/new-avatar.jpg"
                    }
                    """))) @Valid @RequestBody CreateUserRequest request) {
        try {
            UserDto user = userService.updateUser(id, request);
            ApiResponse<UserDto> response = ApiResponse.success("C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng", user);
            return ResponseEntity.ok(response);
        } catch (RuntimeException e) {
            if (e.getMessage().contains("not found")) {
                ApiResponse<UserDto> response = ApiResponse.notFound(e.getMessage());
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
            }
            if (e.getMessage().contains("already exists")) {
                ApiResponse<UserDto> response = ApiResponse.conflict(e.getMessage());
                return ResponseEntity.status(HttpStatus.CONFLICT).body(response);
            }
            ApiResponse<UserDto> response = ApiResponse.error("L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        } catch (Exception e) {
            ApiResponse<UserDto> response = ApiResponse.error("L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    @Operation(summary = "üóëÔ∏è X√≥a ng∆∞·ªùi d√πng", description = "X√≥a m·ªôt ng∆∞·ªùi d√πng kh·ªèi h·ªá th·ªëng")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "‚úÖ X√≥a th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng")
    })
    @DeleteMapping("/{id}")
    public ResponseEntity<ApiResponse<Void>> deleteUser(
            @Parameter(description = "ID c·ªßa ng∆∞·ªùi d√πng", required = true, example = "1") @PathVariable Integer id) {
        try {
            userService.deleteUser(id);
            ApiResponse<Void> response = ApiResponse.success("X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng", null);
            return ResponseEntity.ok(response);
        } catch (RuntimeException e) {
            if (e.getMessage().contains("not found")) {
                ApiResponse<Void> response = ApiResponse.notFound(e.getMessage());
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
            }
            ApiResponse<Void> response = ApiResponse.error("L·ªói khi x√≥a ng∆∞·ªùi d√πng: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        } catch (Exception e) {
            ApiResponse<Void> response = ApiResponse.error("L·ªói khi x√≥a ng∆∞·ªùi d√πng: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }

    @Operation(summary = "üîê X√°c th·ª±c m·∫≠t kh·∫©u", description = "Ki·ªÉm tra username v√† password c√≥ ƒë√∫ng kh√¥ng")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "‚úÖ X√°c th·ª±c th√†nh c√¥ng"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "401", description = "‚ùå Username ho·∫∑c password kh√¥ng ƒë√∫ng")
    })
    @PostMapping("/verify")
    public ResponseEntity<ApiResponse<Boolean>> verifyPassword(
            @io.swagger.v3.oas.annotations.parameters.RequestBody(description = "Th√¥ng tin x√°c th·ª±c", required = true, content = @Content(mediaType = "application/json", examples = @ExampleObject(value = """
                    {
                      "username": "john_doe",
                      "password": "password123"
                    }
                    """))) @RequestBody Map<String, String> credentials) {
        try {
            String username = credentials.get("username");
            String password = credentials.get("password");

            if (username == null || password == null) {
                ApiResponse<Boolean> response = ApiResponse.badRequest("Username v√† password kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
            }

            boolean isValid = userService.verifyUserPassword(username, password);

            if (isValid) {
                ApiResponse<Boolean> response = ApiResponse.success("X√°c th·ª±c th√†nh c√¥ng", true);
                return ResponseEntity.ok(response);
            } else {
                ApiResponse<Boolean> response = ApiResponse.error("Username ho·∫∑c password kh√¥ng ƒë√∫ng", 401);
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }
        } catch (Exception e) {
            ApiResponse<Boolean> response = ApiResponse.error("L·ªói khi x√°c th·ª±c: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }
}
